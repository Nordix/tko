// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: tko.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Data_About_FullMethodName                        = "/tko.Data/about"
	Data_RegisterTemplate_FullMethodName             = "/tko.Data/registerTemplate"
	Data_DeleteTemplate_FullMethodName               = "/tko.Data/deleteTemplate"
	Data_GetTemplate_FullMethodName                  = "/tko.Data/getTemplate"
	Data_ListTemplates_FullMethodName                = "/tko.Data/listTemplates"
	Data_PurgeTemplates_FullMethodName               = "/tko.Data/purgeTemplates"
	Data_RegisterSite_FullMethodName                 = "/tko.Data/registerSite"
	Data_DeleteSite_FullMethodName                   = "/tko.Data/deleteSite"
	Data_GetSite_FullMethodName                      = "/tko.Data/getSite"
	Data_ListSites_FullMethodName                    = "/tko.Data/listSites"
	Data_PurgeSites_FullMethodName                   = "/tko.Data/purgeSites"
	Data_CreateDeployment_FullMethodName             = "/tko.Data/createDeployment"
	Data_DeleteDeployment_FullMethodName             = "/tko.Data/deleteDeployment"
	Data_GetDeployment_FullMethodName                = "/tko.Data/getDeployment"
	Data_ListDeployments_FullMethodName              = "/tko.Data/listDeployments"
	Data_PurgeDeployments_FullMethodName             = "/tko.Data/purgeDeployments"
	Data_StartDeploymentModification_FullMethodName  = "/tko.Data/startDeploymentModification"
	Data_EndDeploymentModification_FullMethodName    = "/tko.Data/endDeploymentModification"
	Data_CancelDeploymentModification_FullMethodName = "/tko.Data/cancelDeploymentModification"
	Data_RegisterPlugin_FullMethodName               = "/tko.Data/registerPlugin"
	Data_DeletePlugin_FullMethodName                 = "/tko.Data/deletePlugin"
	Data_GetPlugin_FullMethodName                    = "/tko.Data/getPlugin"
	Data_ListPlugins_FullMethodName                  = "/tko.Data/listPlugins"
	Data_PurgePlugins_FullMethodName                 = "/tko.Data/purgePlugins"
)

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataClient interface {
	About(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AboutResponse, error)
	RegisterTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*RegisterResponse, error)
	DeleteTemplate(ctx context.Context, in *TemplateID, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetTemplate(ctx context.Context, in *GetTemplate, opts ...grpc.CallOption) (*Template, error)
	ListTemplates(ctx context.Context, in *ListTemplates, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListedTemplate], error)
	PurgeTemplates(ctx context.Context, in *SelectTemplates, opts ...grpc.CallOption) (*DeleteResponse, error)
	RegisterSite(ctx context.Context, in *Site, opts ...grpc.CallOption) (*RegisterResponse, error)
	DeleteSite(ctx context.Context, in *SiteID, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetSite(ctx context.Context, in *GetSite, opts ...grpc.CallOption) (*Site, error)
	ListSites(ctx context.Context, in *ListSites, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListedSite], error)
	PurgeSites(ctx context.Context, in *SelectSites, opts ...grpc.CallOption) (*DeleteResponse, error)
	CreateDeployment(ctx context.Context, in *CreateDeployment, opts ...grpc.CallOption) (*CreateDeploymentResponse, error)
	DeleteDeployment(ctx context.Context, in *DeploymentID, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetDeployment(ctx context.Context, in *GetDeployment, opts ...grpc.CallOption) (*Deployment, error)
	ListDeployments(ctx context.Context, in *ListDeployments, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListedDeployment], error)
	PurgeDeployments(ctx context.Context, in *SelectDeployments, opts ...grpc.CallOption) (*DeleteResponse, error)
	StartDeploymentModification(ctx context.Context, in *StartDeploymentModification, opts ...grpc.CallOption) (*StartDeploymentModificationResponse, error)
	EndDeploymentModification(ctx context.Context, in *EndDeploymentModification, opts ...grpc.CallOption) (*EndDeploymentModificationResponse, error)
	CancelDeploymentModification(ctx context.Context, in *CancelDeploymentModification, opts ...grpc.CallOption) (*CancelDeploymentModificationResponse, error)
	RegisterPlugin(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*RegisterResponse, error)
	DeletePlugin(ctx context.Context, in *PluginID, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetPlugin(ctx context.Context, in *PluginID, opts ...grpc.CallOption) (*Plugin, error)
	ListPlugins(ctx context.Context, in *ListPlugins, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Plugin], error)
	PurgePlugins(ctx context.Context, in *SelectPlugins, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type dataClient struct {
	cc grpc.ClientConnInterface
}

func NewDataClient(cc grpc.ClientConnInterface) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) About(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AboutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AboutResponse)
	err := c.cc.Invoke(ctx, Data_About_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) RegisterTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, Data_RegisterTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteTemplate(ctx context.Context, in *TemplateID, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Data_DeleteTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetTemplate(ctx context.Context, in *GetTemplate, opts ...grpc.CallOption) (*Template, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Template)
	err := c.cc.Invoke(ctx, Data_GetTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTemplates(ctx context.Context, in *ListTemplates, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListedTemplate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Data_ServiceDesc.Streams[0], Data_ListTemplates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListTemplates, ListedTemplate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Data_ListTemplatesClient = grpc.ServerStreamingClient[ListedTemplate]

func (c *dataClient) PurgeTemplates(ctx context.Context, in *SelectTemplates, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Data_PurgeTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) RegisterSite(ctx context.Context, in *Site, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, Data_RegisterSite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteSite(ctx context.Context, in *SiteID, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Data_DeleteSite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetSite(ctx context.Context, in *GetSite, opts ...grpc.CallOption) (*Site, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Site)
	err := c.cc.Invoke(ctx, Data_GetSite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListSites(ctx context.Context, in *ListSites, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListedSite], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Data_ServiceDesc.Streams[1], Data_ListSites_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListSites, ListedSite]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Data_ListSitesClient = grpc.ServerStreamingClient[ListedSite]

func (c *dataClient) PurgeSites(ctx context.Context, in *SelectSites, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Data_PurgeSites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateDeployment(ctx context.Context, in *CreateDeployment, opts ...grpc.CallOption) (*CreateDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDeploymentResponse)
	err := c.cc.Invoke(ctx, Data_CreateDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteDeployment(ctx context.Context, in *DeploymentID, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Data_DeleteDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetDeployment(ctx context.Context, in *GetDeployment, opts ...grpc.CallOption) (*Deployment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Deployment)
	err := c.cc.Invoke(ctx, Data_GetDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListDeployments(ctx context.Context, in *ListDeployments, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListedDeployment], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Data_ServiceDesc.Streams[2], Data_ListDeployments_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListDeployments, ListedDeployment]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Data_ListDeploymentsClient = grpc.ServerStreamingClient[ListedDeployment]

func (c *dataClient) PurgeDeployments(ctx context.Context, in *SelectDeployments, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Data_PurgeDeployments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) StartDeploymentModification(ctx context.Context, in *StartDeploymentModification, opts ...grpc.CallOption) (*StartDeploymentModificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartDeploymentModificationResponse)
	err := c.cc.Invoke(ctx, Data_StartDeploymentModification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) EndDeploymentModification(ctx context.Context, in *EndDeploymentModification, opts ...grpc.CallOption) (*EndDeploymentModificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndDeploymentModificationResponse)
	err := c.cc.Invoke(ctx, Data_EndDeploymentModification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CancelDeploymentModification(ctx context.Context, in *CancelDeploymentModification, opts ...grpc.CallOption) (*CancelDeploymentModificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelDeploymentModificationResponse)
	err := c.cc.Invoke(ctx, Data_CancelDeploymentModification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) RegisterPlugin(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, Data_RegisterPlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeletePlugin(ctx context.Context, in *PluginID, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Data_DeletePlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetPlugin(ctx context.Context, in *PluginID, opts ...grpc.CallOption) (*Plugin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Plugin)
	err := c.cc.Invoke(ctx, Data_GetPlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListPlugins(ctx context.Context, in *ListPlugins, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Plugin], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Data_ServiceDesc.Streams[3], Data_ListPlugins_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListPlugins, Plugin]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Data_ListPluginsClient = grpc.ServerStreamingClient[Plugin]

func (c *dataClient) PurgePlugins(ctx context.Context, in *SelectPlugins, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Data_PurgePlugins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServer is the server API for Data service.
// All implementations must embed UnimplementedDataServer
// for forward compatibility.
type DataServer interface {
	About(context.Context, *emptypb.Empty) (*AboutResponse, error)
	RegisterTemplate(context.Context, *Template) (*RegisterResponse, error)
	DeleteTemplate(context.Context, *TemplateID) (*DeleteResponse, error)
	GetTemplate(context.Context, *GetTemplate) (*Template, error)
	ListTemplates(*ListTemplates, grpc.ServerStreamingServer[ListedTemplate]) error
	PurgeTemplates(context.Context, *SelectTemplates) (*DeleteResponse, error)
	RegisterSite(context.Context, *Site) (*RegisterResponse, error)
	DeleteSite(context.Context, *SiteID) (*DeleteResponse, error)
	GetSite(context.Context, *GetSite) (*Site, error)
	ListSites(*ListSites, grpc.ServerStreamingServer[ListedSite]) error
	PurgeSites(context.Context, *SelectSites) (*DeleteResponse, error)
	CreateDeployment(context.Context, *CreateDeployment) (*CreateDeploymentResponse, error)
	DeleteDeployment(context.Context, *DeploymentID) (*DeleteResponse, error)
	GetDeployment(context.Context, *GetDeployment) (*Deployment, error)
	ListDeployments(*ListDeployments, grpc.ServerStreamingServer[ListedDeployment]) error
	PurgeDeployments(context.Context, *SelectDeployments) (*DeleteResponse, error)
	StartDeploymentModification(context.Context, *StartDeploymentModification) (*StartDeploymentModificationResponse, error)
	EndDeploymentModification(context.Context, *EndDeploymentModification) (*EndDeploymentModificationResponse, error)
	CancelDeploymentModification(context.Context, *CancelDeploymentModification) (*CancelDeploymentModificationResponse, error)
	RegisterPlugin(context.Context, *Plugin) (*RegisterResponse, error)
	DeletePlugin(context.Context, *PluginID) (*DeleteResponse, error)
	GetPlugin(context.Context, *PluginID) (*Plugin, error)
	ListPlugins(*ListPlugins, grpc.ServerStreamingServer[Plugin]) error
	PurgePlugins(context.Context, *SelectPlugins) (*DeleteResponse, error)
	mustEmbedUnimplementedDataServer()
}

// UnimplementedDataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataServer struct{}

func (UnimplementedDataServer) About(context.Context, *emptypb.Empty) (*AboutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method About not implemented")
}
func (UnimplementedDataServer) RegisterTemplate(context.Context, *Template) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTemplate not implemented")
}
func (UnimplementedDataServer) DeleteTemplate(context.Context, *TemplateID) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedDataServer) GetTemplate(context.Context, *GetTemplate) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedDataServer) ListTemplates(*ListTemplates, grpc.ServerStreamingServer[ListedTemplate]) error {
	return status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedDataServer) PurgeTemplates(context.Context, *SelectTemplates) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeTemplates not implemented")
}
func (UnimplementedDataServer) RegisterSite(context.Context, *Site) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSite not implemented")
}
func (UnimplementedDataServer) DeleteSite(context.Context, *SiteID) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSite not implemented")
}
func (UnimplementedDataServer) GetSite(context.Context, *GetSite) (*Site, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSite not implemented")
}
func (UnimplementedDataServer) ListSites(*ListSites, grpc.ServerStreamingServer[ListedSite]) error {
	return status.Errorf(codes.Unimplemented, "method ListSites not implemented")
}
func (UnimplementedDataServer) PurgeSites(context.Context, *SelectSites) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeSites not implemented")
}
func (UnimplementedDataServer) CreateDeployment(context.Context, *CreateDeployment) (*CreateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedDataServer) DeleteDeployment(context.Context, *DeploymentID) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (UnimplementedDataServer) GetDeployment(context.Context, *GetDeployment) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedDataServer) ListDeployments(*ListDeployments, grpc.ServerStreamingServer[ListedDeployment]) error {
	return status.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (UnimplementedDataServer) PurgeDeployments(context.Context, *SelectDeployments) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeDeployments not implemented")
}
func (UnimplementedDataServer) StartDeploymentModification(context.Context, *StartDeploymentModification) (*StartDeploymentModificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDeploymentModification not implemented")
}
func (UnimplementedDataServer) EndDeploymentModification(context.Context, *EndDeploymentModification) (*EndDeploymentModificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndDeploymentModification not implemented")
}
func (UnimplementedDataServer) CancelDeploymentModification(context.Context, *CancelDeploymentModification) (*CancelDeploymentModificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDeploymentModification not implemented")
}
func (UnimplementedDataServer) RegisterPlugin(context.Context, *Plugin) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPlugin not implemented")
}
func (UnimplementedDataServer) DeletePlugin(context.Context, *PluginID) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlugin not implemented")
}
func (UnimplementedDataServer) GetPlugin(context.Context, *PluginID) (*Plugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlugin not implemented")
}
func (UnimplementedDataServer) ListPlugins(*ListPlugins, grpc.ServerStreamingServer[Plugin]) error {
	return status.Errorf(codes.Unimplemented, "method ListPlugins not implemented")
}
func (UnimplementedDataServer) PurgePlugins(context.Context, *SelectPlugins) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgePlugins not implemented")
}
func (UnimplementedDataServer) mustEmbedUnimplementedDataServer() {}
func (UnimplementedDataServer) testEmbeddedByValue()              {}

// UnsafeDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServer will
// result in compilation errors.
type UnsafeDataServer interface {
	mustEmbedUnimplementedDataServer()
}

func RegisterDataServer(s grpc.ServiceRegistrar, srv DataServer) {
	// If the following call pancis, it indicates UnimplementedDataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Data_ServiceDesc, srv)
}

func _Data_About_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).About(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_About_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).About(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_RegisterTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Template)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).RegisterTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_RegisterTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).RegisterTemplate(ctx, req.(*Template))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteTemplate(ctx, req.(*TemplateID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetTemplate(ctx, req.(*GetTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTemplates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTemplates)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServer).ListTemplates(m, &grpc.GenericServerStream[ListTemplates, ListedTemplate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Data_ListTemplatesServer = grpc.ServerStreamingServer[ListedTemplate]

func _Data_PurgeTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectTemplates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PurgeTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_PurgeTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PurgeTemplates(ctx, req.(*SelectTemplates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_RegisterSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Site)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).RegisterSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_RegisterSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).RegisterSite(ctx, req.(*Site))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiteID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteSite(ctx, req.(*SiteID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetSite(ctx, req.(*GetSite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListSites_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSites)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServer).ListSites(m, &grpc.GenericServerStream[ListSites, ListedSite]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Data_ListSitesServer = grpc.ServerStreamingServer[ListedSite]

func _Data_PurgeSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectSites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PurgeSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_PurgeSites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PurgeSites(ctx, req.(*SelectSites))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateDeployment(ctx, req.(*CreateDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteDeployment(ctx, req.(*DeploymentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetDeployment(ctx, req.(*GetDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListDeployments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDeployments)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServer).ListDeployments(m, &grpc.GenericServerStream[ListDeployments, ListedDeployment]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Data_ListDeploymentsServer = grpc.ServerStreamingServer[ListedDeployment]

func _Data_PurgeDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectDeployments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PurgeDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_PurgeDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PurgeDeployments(ctx, req.(*SelectDeployments))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_StartDeploymentModification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDeploymentModification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).StartDeploymentModification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_StartDeploymentModification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).StartDeploymentModification(ctx, req.(*StartDeploymentModification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_EndDeploymentModification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeploymentModification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).EndDeploymentModification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_EndDeploymentModification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).EndDeploymentModification(ctx, req.(*EndDeploymentModification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CancelDeploymentModification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDeploymentModification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CancelDeploymentModification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CancelDeploymentModification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CancelDeploymentModification(ctx, req.(*CancelDeploymentModification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_RegisterPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).RegisterPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_RegisterPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).RegisterPlugin(ctx, req.(*Plugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeletePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeletePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeletePlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeletePlugin(ctx, req.(*PluginID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetPlugin(ctx, req.(*PluginID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListPlugins_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPlugins)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServer).ListPlugins(m, &grpc.GenericServerStream[ListPlugins, Plugin]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Data_ListPluginsServer = grpc.ServerStreamingServer[Plugin]

func _Data_PurgePlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectPlugins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PurgePlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_PurgePlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PurgePlugins(ctx, req.(*SelectPlugins))
	}
	return interceptor(ctx, in, info, handler)
}

// Data_ServiceDesc is the grpc.ServiceDesc for Data service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Data_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tko.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "about",
			Handler:    _Data_About_Handler,
		},
		{
			MethodName: "registerTemplate",
			Handler:    _Data_RegisterTemplate_Handler,
		},
		{
			MethodName: "deleteTemplate",
			Handler:    _Data_DeleteTemplate_Handler,
		},
		{
			MethodName: "getTemplate",
			Handler:    _Data_GetTemplate_Handler,
		},
		{
			MethodName: "purgeTemplates",
			Handler:    _Data_PurgeTemplates_Handler,
		},
		{
			MethodName: "registerSite",
			Handler:    _Data_RegisterSite_Handler,
		},
		{
			MethodName: "deleteSite",
			Handler:    _Data_DeleteSite_Handler,
		},
		{
			MethodName: "getSite",
			Handler:    _Data_GetSite_Handler,
		},
		{
			MethodName: "purgeSites",
			Handler:    _Data_PurgeSites_Handler,
		},
		{
			MethodName: "createDeployment",
			Handler:    _Data_CreateDeployment_Handler,
		},
		{
			MethodName: "deleteDeployment",
			Handler:    _Data_DeleteDeployment_Handler,
		},
		{
			MethodName: "getDeployment",
			Handler:    _Data_GetDeployment_Handler,
		},
		{
			MethodName: "purgeDeployments",
			Handler:    _Data_PurgeDeployments_Handler,
		},
		{
			MethodName: "startDeploymentModification",
			Handler:    _Data_StartDeploymentModification_Handler,
		},
		{
			MethodName: "endDeploymentModification",
			Handler:    _Data_EndDeploymentModification_Handler,
		},
		{
			MethodName: "cancelDeploymentModification",
			Handler:    _Data_CancelDeploymentModification_Handler,
		},
		{
			MethodName: "registerPlugin",
			Handler:    _Data_RegisterPlugin_Handler,
		},
		{
			MethodName: "deletePlugin",
			Handler:    _Data_DeletePlugin_Handler,
		},
		{
			MethodName: "getPlugin",
			Handler:    _Data_GetPlugin_Handler,
		},
		{
			MethodName: "purgePlugins",
			Handler:    _Data_PurgePlugins_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listTemplates",
			Handler:       _Data_ListTemplates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listSites",
			Handler:       _Data_ListSites_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listDeployments",
			Handler:       _Data_ListDeployments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listPlugins",
			Handler:       _Data_ListPlugins_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tko.proto",
}
