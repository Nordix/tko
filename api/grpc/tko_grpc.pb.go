// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: tko.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	API_RegisterTemplate_FullMethodName             = "/tko.API/registerTemplate"
	API_DeleteTemplate_FullMethodName               = "/tko.API/deleteTemplate"
	API_GetTemplate_FullMethodName                  = "/tko.API/getTemplate"
	API_ListTemplates_FullMethodName                = "/tko.API/listTemplates"
	API_RegisterSite_FullMethodName                 = "/tko.API/registerSite"
	API_DeleteSite_FullMethodName                   = "/tko.API/deleteSite"
	API_GetSite_FullMethodName                      = "/tko.API/getSite"
	API_ListSites_FullMethodName                    = "/tko.API/listSites"
	API_CreateDeployment_FullMethodName             = "/tko.API/createDeployment"
	API_DeleteDeployment_FullMethodName             = "/tko.API/deleteDeployment"
	API_GetDeployment_FullMethodName                = "/tko.API/getDeployment"
	API_ListDeployments_FullMethodName              = "/tko.API/listDeployments"
	API_StartDeploymentModification_FullMethodName  = "/tko.API/startDeploymentModification"
	API_EndDeploymentModification_FullMethodName    = "/tko.API/endDeploymentModification"
	API_CancelDeploymentModification_FullMethodName = "/tko.API/cancelDeploymentModification"
	API_RegisterPlugin_FullMethodName               = "/tko.API/registerPlugin"
	API_DeletePlugin_FullMethodName                 = "/tko.API/deletePlugin"
	API_GetPlugin_FullMethodName                    = "/tko.API/getPlugin"
	API_ListPlugins_FullMethodName                  = "/tko.API/listPlugins"
)

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	RegisterTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*RegisterResponse, error)
	DeleteTemplate(ctx context.Context, in *DeleteTemplate, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetTemplate(ctx context.Context, in *GetTemplate, opts ...grpc.CallOption) (*Template, error)
	ListTemplates(ctx context.Context, in *ListTemplates, opts ...grpc.CallOption) (API_ListTemplatesClient, error)
	RegisterSite(ctx context.Context, in *Site, opts ...grpc.CallOption) (*RegisterResponse, error)
	DeleteSite(ctx context.Context, in *DeleteSite, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetSite(ctx context.Context, in *GetSite, opts ...grpc.CallOption) (*Site, error)
	ListSites(ctx context.Context, in *ListSites, opts ...grpc.CallOption) (API_ListSitesClient, error)
	CreateDeployment(ctx context.Context, in *CreateDeployment, opts ...grpc.CallOption) (*CreateDeploymentResponse, error)
	DeleteDeployment(ctx context.Context, in *DeleteDeployment, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetDeployment(ctx context.Context, in *GetDeployment, opts ...grpc.CallOption) (*Deployment, error)
	ListDeployments(ctx context.Context, in *ListDeployments, opts ...grpc.CallOption) (API_ListDeploymentsClient, error)
	StartDeploymentModification(ctx context.Context, in *StartDeploymentModification, opts ...grpc.CallOption) (*StartDeploymentModificationResponse, error)
	EndDeploymentModification(ctx context.Context, in *EndDeploymentModification, opts ...grpc.CallOption) (*EndDeploymentModificationResponse, error)
	CancelDeploymentModification(ctx context.Context, in *CancelDeploymentModification, opts ...grpc.CallOption) (*CancelDeploymentModificationResponse, error)
	RegisterPlugin(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*RegisterResponse, error)
	DeletePlugin(ctx context.Context, in *DeletePlugin, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetPlugin(ctx context.Context, in *GetPlugin, opts ...grpc.CallOption) (*Plugin, error)
	ListPlugins(ctx context.Context, in *ListPlugins, opts ...grpc.CallOption) (API_ListPluginsClient, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) RegisterTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, API_RegisterTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteTemplate(ctx context.Context, in *DeleteTemplate, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, API_DeleteTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetTemplate(ctx context.Context, in *GetTemplate, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, API_GetTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListTemplates(ctx context.Context, in *ListTemplates, opts ...grpc.CallOption) (API_ListTemplatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[0], API_ListTemplates_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIListTemplatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_ListTemplatesClient interface {
	Recv() (*ListTemplatesResponse, error)
	grpc.ClientStream
}

type aPIListTemplatesClient struct {
	grpc.ClientStream
}

func (x *aPIListTemplatesClient) Recv() (*ListTemplatesResponse, error) {
	m := new(ListTemplatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) RegisterSite(ctx context.Context, in *Site, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, API_RegisterSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteSite(ctx context.Context, in *DeleteSite, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, API_DeleteSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetSite(ctx context.Context, in *GetSite, opts ...grpc.CallOption) (*Site, error) {
	out := new(Site)
	err := c.cc.Invoke(ctx, API_GetSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListSites(ctx context.Context, in *ListSites, opts ...grpc.CallOption) (API_ListSitesClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[1], API_ListSites_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIListSitesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_ListSitesClient interface {
	Recv() (*ListSitesResponse, error)
	grpc.ClientStream
}

type aPIListSitesClient struct {
	grpc.ClientStream
}

func (x *aPIListSitesClient) Recv() (*ListSitesResponse, error) {
	m := new(ListSitesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) CreateDeployment(ctx context.Context, in *CreateDeployment, opts ...grpc.CallOption) (*CreateDeploymentResponse, error) {
	out := new(CreateDeploymentResponse)
	err := c.cc.Invoke(ctx, API_CreateDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteDeployment(ctx context.Context, in *DeleteDeployment, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, API_DeleteDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetDeployment(ctx context.Context, in *GetDeployment, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, API_GetDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListDeployments(ctx context.Context, in *ListDeployments, opts ...grpc.CallOption) (API_ListDeploymentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[2], API_ListDeployments_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIListDeploymentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_ListDeploymentsClient interface {
	Recv() (*ListDeploymentsResponse, error)
	grpc.ClientStream
}

type aPIListDeploymentsClient struct {
	grpc.ClientStream
}

func (x *aPIListDeploymentsClient) Recv() (*ListDeploymentsResponse, error) {
	m := new(ListDeploymentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) StartDeploymentModification(ctx context.Context, in *StartDeploymentModification, opts ...grpc.CallOption) (*StartDeploymentModificationResponse, error) {
	out := new(StartDeploymentModificationResponse)
	err := c.cc.Invoke(ctx, API_StartDeploymentModification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) EndDeploymentModification(ctx context.Context, in *EndDeploymentModification, opts ...grpc.CallOption) (*EndDeploymentModificationResponse, error) {
	out := new(EndDeploymentModificationResponse)
	err := c.cc.Invoke(ctx, API_EndDeploymentModification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CancelDeploymentModification(ctx context.Context, in *CancelDeploymentModification, opts ...grpc.CallOption) (*CancelDeploymentModificationResponse, error) {
	out := new(CancelDeploymentModificationResponse)
	err := c.cc.Invoke(ctx, API_CancelDeploymentModification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) RegisterPlugin(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, API_RegisterPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeletePlugin(ctx context.Context, in *DeletePlugin, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, API_DeletePlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetPlugin(ctx context.Context, in *GetPlugin, opts ...grpc.CallOption) (*Plugin, error) {
	out := new(Plugin)
	err := c.cc.Invoke(ctx, API_GetPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListPlugins(ctx context.Context, in *ListPlugins, opts ...grpc.CallOption) (API_ListPluginsClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[3], API_ListPlugins_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIListPluginsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_ListPluginsClient interface {
	Recv() (*ListPluginsResponse, error)
	grpc.ClientStream
}

type aPIListPluginsClient struct {
	grpc.ClientStream
}

func (x *aPIListPluginsClient) Recv() (*ListPluginsResponse, error) {
	m := new(ListPluginsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	RegisterTemplate(context.Context, *Template) (*RegisterResponse, error)
	DeleteTemplate(context.Context, *DeleteTemplate) (*DeleteResponse, error)
	GetTemplate(context.Context, *GetTemplate) (*Template, error)
	ListTemplates(*ListTemplates, API_ListTemplatesServer) error
	RegisterSite(context.Context, *Site) (*RegisterResponse, error)
	DeleteSite(context.Context, *DeleteSite) (*DeleteResponse, error)
	GetSite(context.Context, *GetSite) (*Site, error)
	ListSites(*ListSites, API_ListSitesServer) error
	CreateDeployment(context.Context, *CreateDeployment) (*CreateDeploymentResponse, error)
	DeleteDeployment(context.Context, *DeleteDeployment) (*DeleteResponse, error)
	GetDeployment(context.Context, *GetDeployment) (*Deployment, error)
	ListDeployments(*ListDeployments, API_ListDeploymentsServer) error
	StartDeploymentModification(context.Context, *StartDeploymentModification) (*StartDeploymentModificationResponse, error)
	EndDeploymentModification(context.Context, *EndDeploymentModification) (*EndDeploymentModificationResponse, error)
	CancelDeploymentModification(context.Context, *CancelDeploymentModification) (*CancelDeploymentModificationResponse, error)
	RegisterPlugin(context.Context, *Plugin) (*RegisterResponse, error)
	DeletePlugin(context.Context, *DeletePlugin) (*DeleteResponse, error)
	GetPlugin(context.Context, *GetPlugin) (*Plugin, error)
	ListPlugins(*ListPlugins, API_ListPluginsServer) error
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) RegisterTemplate(context.Context, *Template) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTemplate not implemented")
}
func (UnimplementedAPIServer) DeleteTemplate(context.Context, *DeleteTemplate) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedAPIServer) GetTemplate(context.Context, *GetTemplate) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedAPIServer) ListTemplates(*ListTemplates, API_ListTemplatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedAPIServer) RegisterSite(context.Context, *Site) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSite not implemented")
}
func (UnimplementedAPIServer) DeleteSite(context.Context, *DeleteSite) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSite not implemented")
}
func (UnimplementedAPIServer) GetSite(context.Context, *GetSite) (*Site, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSite not implemented")
}
func (UnimplementedAPIServer) ListSites(*ListSites, API_ListSitesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSites not implemented")
}
func (UnimplementedAPIServer) CreateDeployment(context.Context, *CreateDeployment) (*CreateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedAPIServer) DeleteDeployment(context.Context, *DeleteDeployment) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (UnimplementedAPIServer) GetDeployment(context.Context, *GetDeployment) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedAPIServer) ListDeployments(*ListDeployments, API_ListDeploymentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (UnimplementedAPIServer) StartDeploymentModification(context.Context, *StartDeploymentModification) (*StartDeploymentModificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDeploymentModification not implemented")
}
func (UnimplementedAPIServer) EndDeploymentModification(context.Context, *EndDeploymentModification) (*EndDeploymentModificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndDeploymentModification not implemented")
}
func (UnimplementedAPIServer) CancelDeploymentModification(context.Context, *CancelDeploymentModification) (*CancelDeploymentModificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDeploymentModification not implemented")
}
func (UnimplementedAPIServer) RegisterPlugin(context.Context, *Plugin) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPlugin not implemented")
}
func (UnimplementedAPIServer) DeletePlugin(context.Context, *DeletePlugin) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlugin not implemented")
}
func (UnimplementedAPIServer) GetPlugin(context.Context, *GetPlugin) (*Plugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlugin not implemented")
}
func (UnimplementedAPIServer) ListPlugins(*ListPlugins, API_ListPluginsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPlugins not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_RegisterTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Template)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).RegisterTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_RegisterTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).RegisterTemplate(ctx, req.(*Template))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteTemplate(ctx, req.(*DeleteTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetTemplate(ctx, req.(*GetTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListTemplates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTemplates)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).ListTemplates(m, &aPIListTemplatesServer{stream})
}

type API_ListTemplatesServer interface {
	Send(*ListTemplatesResponse) error
	grpc.ServerStream
}

type aPIListTemplatesServer struct {
	grpc.ServerStream
}

func (x *aPIListTemplatesServer) Send(m *ListTemplatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _API_RegisterSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Site)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).RegisterSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_RegisterSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).RegisterSite(ctx, req.(*Site))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteSite(ctx, req.(*DeleteSite))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetSite(ctx, req.(*GetSite))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListSites_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSites)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).ListSites(m, &aPIListSitesServer{stream})
}

type API_ListSitesServer interface {
	Send(*ListSitesResponse) error
	grpc.ServerStream
}

type aPIListSitesServer struct {
	grpc.ServerStream
}

func (x *aPIListSitesServer) Send(m *ListSitesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _API_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CreateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateDeployment(ctx, req.(*CreateDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteDeployment(ctx, req.(*DeleteDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetDeployment(ctx, req.(*GetDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListDeployments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDeployments)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).ListDeployments(m, &aPIListDeploymentsServer{stream})
}

type API_ListDeploymentsServer interface {
	Send(*ListDeploymentsResponse) error
	grpc.ServerStream
}

type aPIListDeploymentsServer struct {
	grpc.ServerStream
}

func (x *aPIListDeploymentsServer) Send(m *ListDeploymentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _API_StartDeploymentModification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDeploymentModification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StartDeploymentModification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_StartDeploymentModification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StartDeploymentModification(ctx, req.(*StartDeploymentModification))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_EndDeploymentModification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeploymentModification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).EndDeploymentModification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_EndDeploymentModification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).EndDeploymentModification(ctx, req.(*EndDeploymentModification))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CancelDeploymentModification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDeploymentModification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CancelDeploymentModification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CancelDeploymentModification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CancelDeploymentModification(ctx, req.(*CancelDeploymentModification))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_RegisterPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).RegisterPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_RegisterPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).RegisterPlugin(ctx, req.(*Plugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeletePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeletePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeletePlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeletePlugin(ctx, req.(*DeletePlugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetPlugin(ctx, req.(*GetPlugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListPlugins_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPlugins)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).ListPlugins(m, &aPIListPluginsServer{stream})
}

type API_ListPluginsServer interface {
	Send(*ListPluginsResponse) error
	grpc.ServerStream
}

type aPIListPluginsServer struct {
	grpc.ServerStream
}

func (x *aPIListPluginsServer) Send(m *ListPluginsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tko.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerTemplate",
			Handler:    _API_RegisterTemplate_Handler,
		},
		{
			MethodName: "deleteTemplate",
			Handler:    _API_DeleteTemplate_Handler,
		},
		{
			MethodName: "getTemplate",
			Handler:    _API_GetTemplate_Handler,
		},
		{
			MethodName: "registerSite",
			Handler:    _API_RegisterSite_Handler,
		},
		{
			MethodName: "deleteSite",
			Handler:    _API_DeleteSite_Handler,
		},
		{
			MethodName: "getSite",
			Handler:    _API_GetSite_Handler,
		},
		{
			MethodName: "createDeployment",
			Handler:    _API_CreateDeployment_Handler,
		},
		{
			MethodName: "deleteDeployment",
			Handler:    _API_DeleteDeployment_Handler,
		},
		{
			MethodName: "getDeployment",
			Handler:    _API_GetDeployment_Handler,
		},
		{
			MethodName: "startDeploymentModification",
			Handler:    _API_StartDeploymentModification_Handler,
		},
		{
			MethodName: "endDeploymentModification",
			Handler:    _API_EndDeploymentModification_Handler,
		},
		{
			MethodName: "cancelDeploymentModification",
			Handler:    _API_CancelDeploymentModification_Handler,
		},
		{
			MethodName: "registerPlugin",
			Handler:    _API_RegisterPlugin_Handler,
		},
		{
			MethodName: "deletePlugin",
			Handler:    _API_DeletePlugin_Handler,
		},
		{
			MethodName: "getPlugin",
			Handler:    _API_GetPlugin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listTemplates",
			Handler:       _API_ListTemplates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listSites",
			Handler:       _API_ListSites_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listDeployments",
			Handler:       _API_ListDeployments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listPlugins",
			Handler:       _API_ListPlugins_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tko.proto",
}
